"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const winston = require("winston");
const BaseError_1 = require("../BaseError");
const utils_1 = require("../utils");
class Logger {
    /**
     * Simple logger constructor is deprecated, use SimpleLogger.initialize() instead.
     *
     * @deprecated
     */
    constructor() {
        throw new Error("Simple logger constructor is deprecated in Winston 3, use Logger.initialize() instead");
    }
    /**
     * Gets the singleton Logger instance, if available.
     */
    static getInstance() {
        if (!this.instance) {
            throw new BaseError_1.BaseError("Logger has not been initialized yet");
        }
        return this.instance;
    }
    /**
     * Initialize a new logger instance using Winston factory.
     *
     * @param options The logger initialization options
     */
    static initialize(options = {}) {
        // Prepare default console transport
        const opt = {
            transports: options.transports || Logger.DEFAULT_TRANSPORTS
        };
        // Construct new Winston logger instance
        const logger = winston.createLogger(Object.assign({}, opt));
        if (!this.instance) {
            this.instance = logger;
        }
        return logger;
    }
}
exports.Logger = Logger;
Logger.DEFAULT_DEVELOPMENT_TRANSPORT = new winston.transports.Console({
    level: process.env.LOG_LEVEL || "info",
    format: winston.format.combine(winston.format.errors({ stack: true }), winston.format.printf(utils_1.stringfyInfo))
});
Logger.DEFAULT_PRODUCTION_TRANSPORT = new winston.transports.Console({
    level: process.env.LOG_LEVEL || "silly",
    format: winston.format.combine(winston.format.errors({ stack: true }), winston.format.timestamp(), winston.format.json())
});
Logger.DEFAULT_TRANSPORTS = [Logger.DEFAULT_DEVELOPMENT_TRANSPORT];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG9nZ2VyLmpzIiwic291cmNlUm9vdCI6Ii4vbGliLyIsInNvdXJjZXMiOlsibG9nZ2VyL0xvZ2dlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG1DQUFtQztBQUVuQyw0Q0FBeUM7QUFDekMsb0NBQXdDO0FBeUN4QyxNQUFhLE1BQU07SUF3QmpCOzs7O09BSUc7SUFDSDtRQUNFLE1BQU0sSUFBSSxLQUFLLENBQUMsdUZBQXVGLENBQUMsQ0FBQztJQUMzRyxDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLENBQUMsV0FBVztRQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNsQixNQUFNLElBQUkscUJBQVMsQ0FBQyxxQ0FBcUMsQ0FBQyxDQUFDO1NBQzVEO1FBQ0QsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3ZCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksTUFBTSxDQUFDLFVBQVUsQ0FBQyxVQUF5QixFQUFFO1FBQ2xELG9DQUFvQztRQUNwQyxNQUFNLEdBQUcsR0FBRztZQUNWLFVBQVUsRUFBRSxPQUFPLENBQUMsVUFBVSxJQUFJLE1BQU0sQ0FBQyxrQkFBa0I7U0FDNUQsQ0FBQztRQUVGLHdDQUF3QztRQUN4QyxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsWUFBWSxtQkFDOUIsR0FBRyxFQUNOLENBQUM7UUFFSCxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNsQixJQUFJLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQztTQUN4QjtRQUVELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7O0FBaEVILHdCQWlFQztBQXpEUSxvQ0FBNkIsR0FBRyxJQUFJLE9BQU8sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDO0lBQ3BFLEtBQUssRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsSUFBSSxNQUFNO0lBQ3RDLE1BQU0sRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLG9CQUFZLENBQUMsQ0FBQztDQUM1RyxDQUFDLENBQUM7QUFFSSxtQ0FBNEIsR0FBRyxJQUFJLE9BQU8sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDO0lBQ25FLEtBQUssRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsSUFBSSxPQUFPO0lBQ3ZDLE1BQU0sRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FDNUIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFDdEMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsRUFDMUIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FDdEI7Q0FDRixDQUFDLENBQUM7QUFFSSx5QkFBa0IsR0FBRyxDQUFDLE1BQU0sQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgd2luc3RvbiBmcm9tIFwid2luc3RvblwiO1xuaW1wb3J0ICogYXMgVHJhbnNwb3J0IGZyb20gXCJ3aW5zdG9uLXRyYW5zcG9ydFwiO1xuaW1wb3J0IHsgQmFzZUVycm9yIH0gZnJvbSBcIi4uL0Jhc2VFcnJvclwiO1xuaW1wb3J0IHsgc3RyaW5nZnlJbmZvIH0gZnJvbSBcIi4uL3V0aWxzXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTG9nZ2VyT3B0aW9ucyBleHRlbmRzIHdpbnN0b24uTG9nZ2VyT3B0aW9ucyB7XG4gIHRyYW5zcG9ydHM/OiBUcmFuc3BvcnRbXTtcbn1cblxuZXhwb3J0IHR5cGUgbm90RXJyb3I8VD4gPSBUIGV4dGVuZHMgRXJyb3IgPyBuZXZlciA6IFQ7XG5cbi8vIE92ZXJyaWRlIHRoZSBMZXZlbGVkTG9nTWV0aG9kIHRvIHJlbW92ZSB0aGUgKGluZm9PYmplY3Q6IG9iamVjdCkgb3ZlcmxvYWQgYXMgdGhpcyBhbGxvd3MgY2FsbHMgdGhhdCBkb24ndCB3b3JrLCBsaWtlIGxvZyhuZXcgRXJyb3IoKSlcbmludGVyZmFjZSBMZXZlbGVkTG9nTWV0aG9kIHtcbiAgKG1lc3NhZ2U6IHN0cmluZywgY2FsbGJhY2s6IHdpbnN0b24uTG9nQ2FsbGJhY2spOiBMb2dnZXI7XG4gIChtZXNzYWdlOiBzdHJpbmcsIG1ldGE6IGFueSwgY2FsbGJhY2s6IHdpbnN0b24uTG9nQ2FsbGJhY2spOiBMb2dnZXI7XG4gIChtZXNzYWdlOiBzdHJpbmcsIC4uLm1ldGE6IGFueVtdKTogTG9nZ2VyO1xuICA8VD4oaW5mb09iamVjdDogbm90RXJyb3I8VD4pOiBMb2dnZXI7XG59XG5cbnR5cGUgbG9nTWV0aG9kcyA9IHtcbiAgLy8gZm9yIGNsaSBhbmQgbnBtIGxldmVsc1xuICBlcnJvcjogTGV2ZWxlZExvZ01ldGhvZDtcbiAgd2FybjogTGV2ZWxlZExvZ01ldGhvZDtcbiAgaGVscDogTGV2ZWxlZExvZ01ldGhvZDtcbiAgZGF0YTogTGV2ZWxlZExvZ01ldGhvZDtcbiAgaW5mbzogTGV2ZWxlZExvZ01ldGhvZDtcbiAgZGVidWc6IExldmVsZWRMb2dNZXRob2Q7XG4gIHByb21wdDogTGV2ZWxlZExvZ01ldGhvZDtcbiAgaHR0cDogTGV2ZWxlZExvZ01ldGhvZDtcbiAgdmVyYm9zZTogTGV2ZWxlZExvZ01ldGhvZDtcbiAgaW5wdXQ6IExldmVsZWRMb2dNZXRob2Q7XG4gIHNpbGx5OiBMZXZlbGVkTG9nTWV0aG9kO1xuXG4gIC8vIGZvciBzeXNsb2cgbGV2ZWxzIG9ubHlcbiAgZW1lcmc6IExldmVsZWRMb2dNZXRob2Q7XG4gIGFsZXJ0OiBMZXZlbGVkTG9nTWV0aG9kO1xuICBjcml0OiBMZXZlbGVkTG9nTWV0aG9kO1xuICB3YXJuaW5nOiBMZXZlbGVkTG9nTWV0aG9kO1xuICBub3RpY2U6IExldmVsZWRMb2dNZXRob2Q7XG59O1xuXG4vLyBFeHBvcnQgdGhlIHdpbnN0b24uTG9nZ2VyIHR5cGUgc28gd2UgZG9uJ3QgbmVlZCB0byBpbnN0YWxsIHRoZSB3aW5zdG9uIHR5cGVzIG9uIGRlcGVuZGFudHNcbmV4cG9ydCB0eXBlIExvZ2dlckluc3RhbmNlID0gT21pdDx3aW5zdG9uLkxvZ2dlciwga2V5b2YgbG9nTWV0aG9kcz4gJiBsb2dNZXRob2RzO1xuXG5leHBvcnQgY2xhc3MgTG9nZ2VyIHtcbiAgLyoqXG4gICAqIFRoZSBzaW5nbGV0b24gbG9nZ2VyIGluc3RhbmNlLCBuZWVkcyB0byBiZSBjcmVhdGVkIHVzaW5nIGBMb2dnZXIuaW5pdGlhbGl6ZSgpYC5cbiAgICpcbiAgICogQHNlZSBMb2dnZXIuaW5pdGlhbGl6ZSgpXG4gICAqL1xuICBwcm90ZWN0ZWQgc3RhdGljIGluc3RhbmNlOiBMb2dnZXJJbnN0YW5jZTtcblxuICBzdGF0aWMgREVGQVVMVF9ERVZFTE9QTUVOVF9UUkFOU1BPUlQgPSBuZXcgd2luc3Rvbi50cmFuc3BvcnRzLkNvbnNvbGUoe1xuICAgIGxldmVsOiBwcm9jZXNzLmVudi5MT0dfTEVWRUwgfHwgXCJpbmZvXCIsXG4gICAgZm9ybWF0OiB3aW5zdG9uLmZvcm1hdC5jb21iaW5lKHdpbnN0b24uZm9ybWF0LmVycm9ycyh7IHN0YWNrOiB0cnVlIH0pLCB3aW5zdG9uLmZvcm1hdC5wcmludGYoc3RyaW5nZnlJbmZvKSlcbiAgfSk7XG5cbiAgc3RhdGljIERFRkFVTFRfUFJPRFVDVElPTl9UUkFOU1BPUlQgPSBuZXcgd2luc3Rvbi50cmFuc3BvcnRzLkNvbnNvbGUoe1xuICAgIGxldmVsOiBwcm9jZXNzLmVudi5MT0dfTEVWRUwgfHwgXCJzaWxseVwiLFxuICAgIGZvcm1hdDogd2luc3Rvbi5mb3JtYXQuY29tYmluZShcbiAgICAgIHdpbnN0b24uZm9ybWF0LmVycm9ycyh7IHN0YWNrOiB0cnVlIH0pLFxuICAgICAgd2luc3Rvbi5mb3JtYXQudGltZXN0YW1wKCksXG4gICAgICB3aW5zdG9uLmZvcm1hdC5qc29uKClcbiAgICApXG4gIH0pO1xuXG4gIHN0YXRpYyBERUZBVUxUX1RSQU5TUE9SVFMgPSBbTG9nZ2VyLkRFRkFVTFRfREVWRUxPUE1FTlRfVFJBTlNQT1JUXTtcblxuICAvKipcbiAgICogU2ltcGxlIGxvZ2dlciBjb25zdHJ1Y3RvciBpcyBkZXByZWNhdGVkLCB1c2UgU2ltcGxlTG9nZ2VyLmluaXRpYWxpemUoKSBpbnN0ZWFkLlxuICAgKlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKi9cbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJTaW1wbGUgbG9nZ2VyIGNvbnN0cnVjdG9yIGlzIGRlcHJlY2F0ZWQgaW4gV2luc3RvbiAzLCB1c2UgTG9nZ2VyLmluaXRpYWxpemUoKSBpbnN0ZWFkXCIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHNpbmdsZXRvbiBMb2dnZXIgaW5zdGFuY2UsIGlmIGF2YWlsYWJsZS5cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgZ2V0SW5zdGFuY2UoKTogTG9nZ2VySW5zdGFuY2Uge1xuICAgIGlmICghdGhpcy5pbnN0YW5jZSkge1xuICAgICAgdGhyb3cgbmV3IEJhc2VFcnJvcihcIkxvZ2dlciBoYXMgbm90IGJlZW4gaW5pdGlhbGl6ZWQgeWV0XCIpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5pbnN0YW5jZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplIGEgbmV3IGxvZ2dlciBpbnN0YW5jZSB1c2luZyBXaW5zdG9uIGZhY3RvcnkuXG4gICAqXG4gICAqIEBwYXJhbSBvcHRpb25zIFRoZSBsb2dnZXIgaW5pdGlhbGl6YXRpb24gb3B0aW9uc1xuICAgKi9cbiAgcHVibGljIHN0YXRpYyBpbml0aWFsaXplKG9wdGlvbnM6IExvZ2dlck9wdGlvbnMgPSB7fSk6IExvZ2dlckluc3RhbmNlIHtcbiAgICAvLyBQcmVwYXJlIGRlZmF1bHQgY29uc29sZSB0cmFuc3BvcnRcbiAgICBjb25zdCBvcHQgPSB7XG4gICAgICB0cmFuc3BvcnRzOiBvcHRpb25zLnRyYW5zcG9ydHMgfHwgTG9nZ2VyLkRFRkFVTFRfVFJBTlNQT1JUU1xuICAgIH07XG5cbiAgICAvLyBDb25zdHJ1Y3QgbmV3IFdpbnN0b24gbG9nZ2VyIGluc3RhbmNlXG4gICAgY29uc3QgbG9nZ2VyID0gd2luc3Rvbi5jcmVhdGVMb2dnZXIoe1xuICAgICAgLi4ub3B0XG4gICAgfSk7XG5cbiAgICBpZiAoIXRoaXMuaW5zdGFuY2UpIHtcbiAgICAgIHRoaXMuaW5zdGFuY2UgPSBsb2dnZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxvZ2dlcjtcbiAgfVxufVxuIl19