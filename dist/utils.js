"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fast_safe_stringify_1 = require("fast-safe-stringify");
const triple_beam_1 = require("triple-beam");
const winston_1 = require("winston");
const BaseError_1 = require("./BaseError");
exports.lineFormat = winston_1.format((info) => {
    const stringifiedRest = fast_safe_stringify_1.default(Object.assign({}, info, { level: undefined, message: undefined, splat: undefined }), null, 2);
    const padding = info.padding && info.padding[info.level] || '';
    if (stringifiedRest !== '{}') {
        info[triple_beam_1.MESSAGE] = `${info.level}:${padding} ${info.message} ${stringifiedRest}`;
    }
    else {
        info[triple_beam_1.MESSAGE] = `${info.level}:${padding} ${info.message}`;
    }
    return info;
});
// Quick and dirty fix for Winston@3.0.0 issue with errors
// @see {https://github.com/winstonjs/winston/issues/1338}
exports.enumerateErrorFormat = winston_1.format((info) => {
    if (info.message instanceof BaseError_1.BaseError) {
        return Object.assign({ message: info.message.message, stack: info.message.stack }, info.message);
    }
    if (info.message instanceof Error) {
        return Object.assign({ message: info.message.message, stack: info.message.stack }, info.message);
    }
    if (info instanceof BaseError_1.BaseError) {
        return Object.assign({ message: info.message, stack: info.stack }, info);
    }
    if (info instanceof Error) {
        return Object.assign({ message: info.message, stack: info.stack }, info);
    }
    return info;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9saWIvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw2REFBZ0Q7QUFDaEQsNkNBQXNDO0FBQ3RDLHFDQUFpQztBQUNqQywyQ0FBd0M7QUFFM0IsUUFBQSxVQUFVLEdBQUcsZ0JBQU0sQ0FBQyxDQUFDLElBQVMsRUFBRSxFQUFFO0lBQzdDLE1BQU0sZUFBZSxHQUFHLDZCQUFhLG1CQUNoQyxJQUFJLElBQ1AsS0FBSyxFQUFFLFNBQVMsRUFDaEIsT0FBTyxFQUFFLFNBQVMsRUFDbEIsS0FBSyxFQUFFLFNBQVMsS0FDZixJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFFWixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUMvRCxJQUFJLGVBQWUsS0FBSyxJQUFJLEVBQUU7UUFDNUIsSUFBSSxDQUFDLHFCQUFPLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLElBQUksT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLElBQUksZUFBZSxFQUFFLENBQUM7S0FDL0U7U0FBTTtRQUNMLElBQUksQ0FBQyxxQkFBTyxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxJQUFJLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7S0FDNUQ7SUFFRCxPQUFPLElBQUksQ0FBQztBQUNkLENBQUMsQ0FBQyxDQUFDO0FBRUgsMERBQTBEO0FBQzFELDBEQUEwRDtBQUM3QyxRQUFBLG9CQUFvQixHQUFHLGdCQUFNLENBQUMsQ0FBQyxJQUFTLEVBQUUsRUFBRTtJQUN2RCxJQUFJLElBQUksQ0FBQyxPQUFPLFlBQVkscUJBQVMsRUFBRTtRQUNyQyx1QkFDRSxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQzdCLEtBQUssRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssSUFDdEIsSUFBSSxDQUFDLE9BQU8sRUFDZjtLQUNIO0lBRUQsSUFBSSxJQUFJLENBQUMsT0FBTyxZQUFZLEtBQUssRUFBRTtRQUNqQyx1QkFDRSxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQzdCLEtBQUssRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssSUFDdEIsSUFBSSxDQUFDLE9BQU8sRUFDZjtLQUNIO0lBRUQsSUFBSSxJQUFJLFlBQVkscUJBQVMsRUFBRTtRQUM3Qix1QkFDRSxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFDckIsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLElBQ2QsSUFBSSxFQUNQO0tBQ0g7SUFFRCxJQUFJLElBQUksWUFBWSxLQUFLLEVBQUU7UUFDekIsdUJBQ0UsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQ3JCLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxJQUNkLElBQUksRUFDUDtLQUNIO0lBRUQsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBqc29uU3RyaW5naWZ5IGZyb20gJ2Zhc3Qtc2FmZS1zdHJpbmdpZnknO1xuaW1wb3J0IHsgTUVTU0FHRSB9IGZyb20gJ3RyaXBsZS1iZWFtJztcbmltcG9ydCB7IGZvcm1hdCB9IGZyb20gJ3dpbnN0b24nO1xuaW1wb3J0IHsgQmFzZUVycm9yIH0gZnJvbSAnLi9CYXNlRXJyb3InO1xuXG5leHBvcnQgY29uc3QgbGluZUZvcm1hdCA9IGZvcm1hdCgoaW5mbzogYW55KSA9PiB7XG4gIGNvbnN0IHN0cmluZ2lmaWVkUmVzdCA9IGpzb25TdHJpbmdpZnkoe1xuICAgIC4uLmluZm8sXG4gICAgbGV2ZWw6IHVuZGVmaW5lZCxcbiAgICBtZXNzYWdlOiB1bmRlZmluZWQsXG4gICAgc3BsYXQ6IHVuZGVmaW5lZFxuICB9LCBudWxsLCAyKTtcblxuICBjb25zdCBwYWRkaW5nID0gaW5mby5wYWRkaW5nICYmIGluZm8ucGFkZGluZ1tpbmZvLmxldmVsXSB8fCAnJztcbiAgaWYgKHN0cmluZ2lmaWVkUmVzdCAhPT0gJ3t9Jykge1xuICAgIGluZm9bTUVTU0FHRV0gPSBgJHtpbmZvLmxldmVsfToke3BhZGRpbmd9ICR7aW5mby5tZXNzYWdlfSAke3N0cmluZ2lmaWVkUmVzdH1gO1xuICB9IGVsc2Uge1xuICAgIGluZm9bTUVTU0FHRV0gPSBgJHtpbmZvLmxldmVsfToke3BhZGRpbmd9ICR7aW5mby5tZXNzYWdlfWA7XG4gIH1cblxuICByZXR1cm4gaW5mbztcbn0pO1xuXG4vLyBRdWljayBhbmQgZGlydHkgZml4IGZvciBXaW5zdG9uQDMuMC4wIGlzc3VlIHdpdGggZXJyb3JzXG4vLyBAc2VlIHtodHRwczovL2dpdGh1Yi5jb20vd2luc3RvbmpzL3dpbnN0b24vaXNzdWVzLzEzMzh9XG5leHBvcnQgY29uc3QgZW51bWVyYXRlRXJyb3JGb3JtYXQgPSBmb3JtYXQoKGluZm86IGFueSkgPT4ge1xuICBpZiAoaW5mby5tZXNzYWdlIGluc3RhbmNlb2YgQmFzZUVycm9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1lc3NhZ2U6IGluZm8ubWVzc2FnZS5tZXNzYWdlLFxuICAgICAgc3RhY2s6IGluZm8ubWVzc2FnZS5zdGFjayxcbiAgICAgIC4uLmluZm8ubWVzc2FnZVxuICAgIH07XG4gIH1cblxuICBpZiAoaW5mby5tZXNzYWdlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWVzc2FnZTogaW5mby5tZXNzYWdlLm1lc3NhZ2UsXG4gICAgICBzdGFjazogaW5mby5tZXNzYWdlLnN0YWNrLFxuICAgICAgLi4uaW5mby5tZXNzYWdlXG4gICAgfTtcbiAgfVxuXG4gIGlmIChpbmZvIGluc3RhbmNlb2YgQmFzZUVycm9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1lc3NhZ2U6IGluZm8ubWVzc2FnZSxcbiAgICAgIHN0YWNrOiBpbmZvLnN0YWNrLFxuICAgICAgLi4uaW5mbyxcbiAgICB9O1xuICB9XG5cbiAgaWYgKGluZm8gaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIHJldHVybiB7XG4gICAgICBtZXNzYWdlOiBpbmZvLm1lc3NhZ2UsXG4gICAgICBzdGFjazogaW5mby5zdGFjayxcbiAgICAgIC4uLmluZm8sXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBpbmZvO1xufSk7XG4iXX0=